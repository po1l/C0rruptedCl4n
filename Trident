print("DEBUG - loading")
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet('https://pastebin.com/raw/WKU5e2CN'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

		getgenv()._Camera = {
			Toggle = false,
			Pos = nil,
			X_Offset = 0,
			Y_Offset = 0
		}
		
		getgenv().SilentSettings = {
			AimType = "To Cursor",
			AimPart = "Head",
			AimDis = 200,
            hitChance = 100,
			AimSleepers = false,
			TeamCheck = true,
			VisibleCheck = true,
			Prediction = true,
		}

local _Camera = getrenv()._G.modules.Camera
local _Character = getrenv()._G.modules.Character
local _Network = getrenv()._G.modules.Network
local _SendCodes = getrenv()._G.modules.Network.SendCodes
local Camera = game:GetService("Workspace").Camera
local CameraPred = game:GetService("Workspace").CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()
local CharcaterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle

local Esp = {Settings={
    Boxes=true,BoxesOutline=true,BoxesColor=Color3.fromRGB(255,255,255),BoxesOutlineColor=Color3.fromRGB(0,0,0),
    Sleeping=false,SleepingColor=Color3.fromRGB(255,255,255),
    Distances=false,DistanceColor=Color3.fromRGB(255,255,255),
    Armour=false,ArmourColor=Color3.fromRGB(255,255,255),
    Tool=false,ToolColor=Color3.fromRGB(255,255,255),
    Tracer=false,TracerColor=Color3.fromRGB(255,255,255),TracerThickness=1,TracerTransparrency=1,TracerFrom="Bottom",
    ViewAngle=false,ViewAngleColor=Color3.fromRGB(255,255,255),ViewAngleThickness=1,ViewAngleTransparrency=1,
    HighlightVisible=true,
    Rainbow=false,
    TextFont=2,TextOutline=true,TextSize=15,RenderDistance=1500,TeamCheck=false,TargetSleepers=false,MinTextSize=8
},Drawings={},Connections={},Players={},Ores={},StorageThings={}}
local Fonts = {["UI"]=0,["System"]=1,["Plex"]=2,["Monospace"]=3}

local Fov = {Settings={
    FovEnabled=false,FovColor=Color3.fromRGB(255,255,255),FovSize=90,FovTransparency=1,Dynamic=true,RealFovSize=90,FovPosition="Mouse",
}}

local Functions = {}
local NoSway = false
local triggerBot = false
local Arrow = game.ReplicatedStorage:WaitForChild("Arrow")
local Bullet = game.ReplicatedStorage:WaitForChild("Bullet")

local gun = workspace.Ignore.FPSArms:FindFirstChild("HandModel")
local arms = workspace.Ignore:FindFirstChild("FPSArms")
local terrain = workspace.Terrain

local function inlos(p, ...)
  return #workspace.CurrentCamera:GetPartsObscuringTarget({p}, {workspace.CurrentCamera, workspace.Ignore.LocalCharacter.Middle, arms, gun, ...}) == 0
end

-- Sleeper Check
		local function IsSleeping(head)
			return (head.Rotation == Vector3.new(0, 0, -75) or head.Rotation == Vector3.new(0, 0, 45)) -- Jank
		end
		
-- Visible Check
		function isPartVisible(part)
			local ignore = workspace.Ignore:GetDescendants();
			local castPoints = { part.Position }
			return Camera:GetPartsObscuringTarget(castPoints, ignore)
		end

-- Closest to cursor
function getClosestPlayerToCursor()
			local closestPlayer = nil;
			local shortestDistance = SilentSettings["AimDis"]
			for i, v in pairs(workspace:GetChildren()) do
				if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v.Name ~= "Player" then
					if v.PrimaryPart ~= nil and v:FindFirstChild("Head") then
						if (not isPartVisible(v.PrimaryPart) and not SilentSettings["VisibleCheck"]) or (IsSleeping(v.Head) and not SilentSettings["AimSleepers"]) then
							return nil
						end
						local pos = Camera.WorldToViewportPoint(Camera, v.PrimaryPart.Position)
						local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
						local MouseMagnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
						if MouseMagnitude < Fov.Settings.RealFovSize then
							closestPlayer = v
							shortestDistance = magnitude
						end
					end
				end
			end
			return closestPlayer
		end

-- Closest to player
function getClosestPlayerToPlayer()
			local closestPlayer = nil
			local shortestDistance = SilentSettings["AimDis"]
			for i, v in pairs(workspace:GetChildren()) do
				if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v.Name ~= "Player" then
					if v.PrimaryPart ~= nil and v:FindFirstChild("Head") then
						if (not isPartVisible(v.PrimaryPart) and not SilentSettings["VisibleCheck"]) or (IsSleeping(v.Head) and not SilentSettings["AimSleepers"]) then
							return nil
						end
						local magnitude = (_Character.character.Middle.Position - v.PrimaryPart.Position).magnitude
						local MouseMagnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
						if magnitude < shortestDistance then
							closestPlayer = v
							shortestDistance = magnitude
						end
					end
				end
			end
			return closestPlayer
		end

-- Closest (prediction)
function Functions:GetClosest()
    local closest,PlayerDistance,playerTable = nil,SilentSettings["AimDis"],nil
    for i,v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
        if v.model:FindFirstChild("HumanoidRootPart") then
            local MousePred = game.Players.LocalPlayer:GetMouse()
            local pos,OnScreen = Camera.WorldToViewportPoint(CameraPred, v.model:GetPivot().Position)
            local MouseMagnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(MousePred.X, MousePred.Y)).Magnitude
            local PlayerDistance = (CharcaterMiddle:GetPivot().Position-v.model:GetPivot().Position).Magnitude
            local PlayerID = v.id
            if PlayerDistance <= SilentSettings["AimDis"] and OnScreen == true then
                closest = v.model;PlayerDistance = PlayerDistance;playerTable=v;playerId = PlayerID
            end
        end
    end
    return closest,playerTable,playerId
end


-- Weapon info
function Functions:GetProjectileInfo()
    if getrenv()._G.modules.FPS.GetEquippedItem() == nil then return 0,0 end
    local mod = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id])
    for i,v in pairs(mod) do
        if i == "ProjectileSpeed" or i == "ProjectileDrop" then
            return mod.ProjectileSpeed,mod.ProjectileDrop
        end
    end
    return 0,0
end

-- Prediction
function Functions:Predict()
    local Prediction = Vector3.new(0,0,0)
    local Drop = Vector3.new(0,0,0)
    if Functions:GetClosest() ~= nil then
        local ps,pd = Functions:GetProjectileInfo()
        local Player,PlayerTable = Functions:GetClosest()
		local Velocity = PlayerTable.velocityVector
        local Distance = (CharcaterMiddle.Position - Player.Head.Position).Magnitude
        if ps == 0 then
            ps = 500
        end
        if pd == 0 then
            pd = 1
        end
        local TimeOfFlight = Distance / ps
        newps = ps - 13 * ps ^ 2 * TimeOfFlight ^ 2
        TimeOfFlight += (Distance / newps)
        if Velocity and TimeOfFlight then
            Prediction = (Velocity * (TimeOfFlight*10)) * .5
        end
    end
    return Prediction,Drop
end

-- Drawing esp
function Functions:Draw(Type,Propities)
    if not Type and not Propities then return end
    local drawing = Drawing.new(Type)
    for i,v in pairs(Propities) do
        drawing[i] = v
    end
    table.insert(Esp.Drawings,drawing)
    return drawing
end

-- Tool names
function Functions:GetToolNames()
    tbl = {}
    for i,v in pairs(game:GetService("ReplicatedStorage").HandModels:GetChildren()) do
        if not table.find(tbl,v.Name) then table.insert(tbl,v.Name) end
    end
    return tbl
end

-- Check tools
function Esp:CheckTools(PlayerTable)
    if not PlayerTable then return end
    if PlayerTable.equippedItem and table.find(Functions:GetToolNames(),PlayerTable["equippedItem"].id) then
        return tostring(PlayerTable["equippedItem"].id)
    elseif PlayerTable.handModel and PlayerTable.handModel.Name and string.find(PlayerTable.handModel.Name,"Hammer") then
        return PlayerTable["handModel"].Name
    else
        return "Empty"
    end
end

-- Create esp
function Esp:CreateEsp(PlayerTable)
    if not PlayerTable then return end
    local drawings = {}
    drawings.BoxOutline = Functions:Draw("Square",{Thickness=2,Filled=false,Transparency=1,Color=Esp.Settings.BoxesOutlineColor,Visible=false,ZIndex = -1,Visible=false});
    drawings.Box = Functions:Draw("Square",{Thickness=1,Filled=false,Transparency=1,Color=Esp.Settings.BoxesColor,Visible=false,ZIndex = 2,Visible=false});
    drawings.Sleeping = Functions:Draw("Text",{Text = "Nil",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=true,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.SleepingColor,ZIndex = 2,Visible=false})
    drawings.Armour = Functions:Draw("Text",{Text = "Naked",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=false,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.ArmourColor,ZIndex = 2,Visible=false})
    drawings.Tool = Functions:Draw("Text",{Text = "Nothing",Font=Esp.Settings.TextFont,Size=Esp.Settings.TextSize,Center=false,Outline=Esp.Settings.TextOutline,Color = Esp.Settings.ToolColor,ZIndex = 2,Visible=false})
    drawings.ViewAngle = Functions:Draw("Line",{Thickness=Esp.Settings.ViewAngleThickness,Transparency=Esp.Settings.ViewAngleTransparrency,Color=Esp.Settings.ViewAngleColor,ZIndex=2,Visible=false})
    drawings.Tracer = Functions:Draw("Line",{Thickness=Esp.Settings.TracerThickness,Transparency=1,Color=Esp.Settings.TracerColor,ZIndex=2,Visible=false})
    drawings.PlayerTable = PlayerTable
    Esp.Players[PlayerTable.model] = drawings
end

-- Remove esp
function Esp:RemoveEsp(PlayerTable)
    if not PlayerTable and PlayerTable.model ~= nil then return end
    esp = Esp.Players[PlayerTable.model];
    if not esp then return end
    for i, v in pairs(esp) do
        if not type(v) == "table" then
            v:Remove();
        end
    end
    Esp.Players[PlayerTable.model] = nil;
end

-- Update esp
function Esp:UpdateEsp()
	if Esp.Settings.Rainbow == true then
		for i,v in pairs(Esp.Players) do
        local Character = i
        local Position,OnScreen = Camera:WorldToViewportPoint(Character:GetPivot().Position);
        local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 100;
        local w,h = math.floor(40 / 2), math.floor(55 / 2);
        local x,y = math.floor(Position.X), math.floor(Position.Y);
        local Distance = (CharcaterMiddle:GetPivot().Position-Character:GetPivot().Position).Magnitude
        local BoxPosX,BoxPosY = math.floor(x - w * 0.5),math.floor(y - h * 0.5)
        local offsetCFrame = CFrame.new(0, 0, -4)
        if Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
            local TeamTag = Character.Head.Teamtag.Enabled
            if OnScreen == true and Esp.Settings.Boxes == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then 
                    v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
                elseif Esp.Settings.TeamCheck == true and TeamTag == true then
                    v.BoxOutline.Visible = false;v.Box.Visible = false
                else
                    v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
                end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then
                    v.BoxOutline.Visible = false;v.Box.Visible = false
                end
                v.BoxOutline.Position = Vector2.new(BoxPosX,BoxPosY);v.BoxOutline.Size = Vector2.new(w,h)
                v.Box.Position = Vector2.new(BoxPosX,BoxPosY);v.Box.Size = Vector2.new(w,h)
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Box.Color = Color3.fromRGB(0,255,0);v.BoxOutline.Color = Esp.Settings.BoxesOutlineColor
                else
                v.Box.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1);v.BoxOutline.Color = Esp.Settings.BoxesOutlineColor
                end
            else
                v.BoxOutline.Visible = false;v.Box.Visible = false
            end
            if OnScreen == true and Esp.Settings.Sleeping == true and Distance <= Esp.Settings.RenderDistance then
                if v.PlayerTable.sleeping == true then v.Sleeping.Text = "Sleeping" else v.Sleeping.Text = "Awake" end
                if Esp.Settings.TeamCheck == true and TeamTag == false then  v.Sleeping.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Sleeping.Visible = false else v.Sleeping.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Sleeping.Visible = false end
                v.Sleeping.Outline=Esp.Settings.TextOutline;v.Sleeping.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Sleeping.Color = Esp.Settings.SleepingColor;v.Sleeping.Font=Esp.Settings.TextFont;v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Sleeping.Color = Color3.fromRGB(0,255,0)
                else
                v.Sleeping.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1)
                end
            else
                v.Sleeping.Visible=false
            end
            if OnScreen == true and Esp.Settings.Distances == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then  v.Sleeping.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Sleeping.Visible = false else v.Sleeping.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Sleeping.Visible = false end

                if Esp.Settings.Sleeping == false then
                    v.Sleeping.Text = math.floor(Distance).."m"
                else
                    v.Sleeping.Text = v.Sleeping.Text.." | "..math.floor(Distance).."m"
                end
                v.Sleeping.Outline=Esp.Settings.TextOutline;v.Sleeping.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Sleeping.Font=Esp.Settings.TextFont;v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Sleeping.Color = Color3.fromRGB(0,255,0)
                else
                v.Sleeping.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1)
                end
            else
                v.Sleeping.Visible = false
            end
            if OnScreen == true and Esp.Settings.Tool == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Tool.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Tool.Visible = false else v.Tool.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Tool.Visible = false end
                v.Tool.Position = Vector2.new(math.floor((BoxPosX+w)+v.Tool.TextBounds.X/10),BoxPosY+v.Tool.TextBounds.Y*1.55*0.5-((v.Tool.TextBounds.Y*2)*0.5)+v.Tool.TextBounds.Y)
                v.Tool.Text=Esp:CheckTools(v.PlayerTable);v.Tool.Outline=Esp.Settings.TextOutline;v.Tool.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Tool.Font=Esp.Settings.TextFont
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Tool.Color = Color3.fromRGB(0,255,0)
                else
                v.Tool.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1)
                end
            else
                v.Tool.Visible = false
            end
            if OnScreen == true and Esp.Settings.Armour == true and Distance <= Esp.Settings.RenderDistance then
                if Character.Armor:FindFirstChildOfClass("Folder") then v.Armour.Text = "Armoured" else v.Armour.Text = "Naked" end
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Armour.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Armour.Visible = false else v.Armour.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Armour.Visible = false end
                v.Armour.Outline=Esp.Settings.TextOutline;v.Armour.Size = math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);
                v.Armour.Position=Vector2.new(math.floor((BoxPosX+w)+v.Armour.TextBounds.X/10),BoxPosY+v.Armour.TextBounds.Y*1.55*0.5-((v.Armour.TextBounds.Y*2)*0.5));v.Armour.Font=Esp.Settings.TextFont
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Armour.Color = Color3.fromRGB(0,255,0)
                else
                v.Armour.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1)
                end
            else
                v.Armour.Visible = false
            end
            if OnScreen == true and Esp.Settings.Tracer == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Tracer.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Tracer.Visible = false else v.Tracer.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Tracer.Visible = false end
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Tracer.Color = Color3.fromRGB(0,255,0)
                else
                v.Tracer.Color = Color3.fromHSV(tick() * 128 % 255/255, 1, 1)
                end
                v.Tracer.Thickness=Esp.Settings.TracerThickness;v.Transparency=Esp.Settings.TracerTransparrency;
                if Esp.Settings.TracerFrom == "Bottom" then
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y)
                    v.Tracer.To = Vector2.new(x,y+h*0.5)
                elseif Esp.Settings.TracerFrom == "Middle" then
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
                    v.Tracer.To = Vector2.new(x,y)
                else
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/Camera.ViewportSize.Y)
                    if Esp.Settings.Sleeping == true then
                        v.Tracer.To = Vector2.new(x,(y-h)-v.Sleeping.TextBounds.Y*0.5)
                    else
                        v.Tracer.To = Vector2.new(x,y-h*0.5)
                    end
                end
            else
                v.Tracer.Visible = false
            end
            if OnScreen == true and Esp.Settings.ViewAngle == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.ViewAngle.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.ViewAngle.Visible = false else v.ViewAngle.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.ViewAngle.Visible = false end
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.ViewAngle.Color = Color3.fromRGB(0,255,0)
                else
                v.ViewAngle.Color=Esp.Settings.ViewAngleColor
                end
                v.ViewAngle.Thickness=Esp.Settings.ViewAngleThickness;v.Transparency=Esp.Settings.ViewAngleTransparrency;
                local headpos = Camera:WorldToViewportPoint(Character.Head.Position)
                local offsetCFrame = CFrame.new(0, 0, -4)
                v.ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
                local value = math.clamp(1/Distance*100, 0.1, 1)
                local dir = Character.Head.CFrame:ToWorldSpace(offsetCFrame)
                offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
                local dirpos = Camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                if OnScreen == true then
                    v.ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
                    offsetCFrame = CFrame.new(0, 0, -4)
                end
            else
                v.ViewAngle.Visible = false
            end
        else
            v.Box.Visible=false;v.BoxOutline.Visible=false;v.Tool.Visible=false;v.Armour.Visible=false;v.Sleeping.Visible=false;v.ViewAngle.Visible=false;v.Tracer.Visible=false;
        end
    end
		else
    		for i,v in pairs(Esp.Players) do
        local Character = i
        local Position,OnScreen = Camera:WorldToViewportPoint(Character:GetPivot().Position);
        local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 100;
        local w,h = math.floor(40 / 2), math.floor(55 / 2 	);
        local x,y = math.floor(Position.X), math.floor(Position.Y);
        local Distance = (CharcaterMiddle:GetPivot().Position-Character:GetPivot().Position).Magnitude
        local BoxPosX,BoxPosY = math.floor(x - w * 0.5),math.floor(y - h * 0.5)
        local offsetCFrame = CFrame.new(0, 0, -4)
        if Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
            local TeamTag = Character.Head.Teamtag.Enabled
            if OnScreen == true and Esp.Settings.Boxes == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then 
                    v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
                elseif Esp.Settings.TeamCheck == true and TeamTag == true then
                    v.BoxOutline.Visible = false;v.Box.Visible = false
                else
                    v.BoxOutline.Visible = Esp.Settings.BoxesOutline;v.Box.Visible = true
                end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then
                    v.BoxOutline.Visible = false;v.Box.Visible = false
                end
                v.BoxOutline.Position = Vector2.new(BoxPosX,BoxPosY);v.BoxOutline.Size = Vector2.new(w,h)
                v.Box.Position = Vector2.new(BoxPosX,BoxPosY);v.Box.Size = Vector2.new(w,h)
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Box.Color = Color3.fromRGB(0,255,0);v.BoxOutline.Color = Esp.Settings.BoxesOutlineColor
                else
                v.Box.Color=Esp.Settings.BoxesColor;v.BoxOutline.Color = Esp.Settings.BoxesOutlineColor
                end
            else
                v.BoxOutline.Visible = false;v.Box.Visible = false
            end
            if OnScreen == true and Esp.Settings.Sleeping == true and Distance <= Esp.Settings.RenderDistance then
                if v.PlayerTable.sleeping == true then v.Sleeping.Text = "Sleeping" else v.Sleeping.Text = "Awake" end
                if Esp.Settings.TeamCheck == true and TeamTag == false then  v.Sleeping.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Sleeping.Visible = false else v.Sleeping.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Sleeping.Visible = false end
                v.Sleeping.Outline=Esp.Settings.TextOutline;v.Sleeping.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Sleeping.Color = Esp.Settings.SleepingColor;v.Sleeping.Font=Esp.Settings.TextFont;v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Sleeping.Color = Color3.fromRGB(0,255,0)
                else
                v.Sleeping.Color=Esp.Settings.SleepingColor
                end
            else
                v.Sleeping.Visible=false
            end
            if OnScreen == true and Esp.Settings.Distances == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then  v.Sleeping.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Sleeping.Visible = false else v.Sleeping.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Sleeping.Visible = false end

                if Esp.Settings.Sleeping == false then
                    v.Sleeping.Text = math.floor(Distance).."m"
                else
                    v.Sleeping.Text = v.Sleeping.Text.." | "..math.floor(Distance).."m"
                end
                v.Sleeping.Outline=Esp.Settings.TextOutline;v.Sleeping.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Sleeping.Color = Esp.Settings.SleepingColor;v.Sleeping.Font=Esp.Settings.TextFont;v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Sleeping.Color = Color3.fromRGB(0,255,0)
                else
                v.Sleeping.Color=Esp.Settings.SleepingColor
                end
            else
                v.Sleeping.Visible = false
            end
            if OnScreen == true and Esp.Settings.Tool == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Tool.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Tool.Visible = false else v.Tool.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Tool.Visible = false end
                v.Tool.Position = Vector2.new(math.floor((BoxPosX+w)+v.Tool.TextBounds.X/10),BoxPosY+v.Tool.TextBounds.Y*1.55*0.5-((v.Tool.TextBounds.Y*2)*0.5)+v.Tool.TextBounds.Y)
                v.Tool.Text=Esp:CheckTools(v.PlayerTable);v.Tool.Outline=Esp.Settings.TextOutline;v.Tool.Size=math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);v.Tool.Font=Esp.Settings.TextFont
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Tool.Color = Color3.fromRGB(0,255,0)
                else
                v.Tool.Color=Esp.Settings.ToolColor
                end
            else
                v.Tool.Visible = false
            end
            if OnScreen == true and Esp.Settings.Armour == true and Distance <= Esp.Settings.RenderDistance then
                if Character.Armor:FindFirstChildOfClass("Folder") then v.Armour.Text = "Armoured" else v.Armour.Text = "Naked" end
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Armour.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Armour.Visible = false else v.Armour.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Armour.Visible = false end
                v.Armour.Outline=Esp.Settings.TextOutline;v.Armour.Size = math.max(math.min(math.abs(Esp.Settings.TextSize),Esp.Settings.TextSize),Esp.Settings.MinTextSize);
                v.Armour.Position=Vector2.new(math.floor((BoxPosX+w)+v.Armour.TextBounds.X/10),BoxPosY+v.Armour.TextBounds.Y*1.55*0.5-((v.Armour.TextBounds.Y*2)*0.5));v.Armour.Font=Esp.Settings.TextFont
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Armour.Color = Color3.fromRGB(0,255,0)
                else
                v.Armour.Color=Esp.Settings.ArmourColor
                end
            else
                v.Armour.Visible = false
            end
            if OnScreen == true and Esp.Settings.Tracer == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.Tracer.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.Tracer.Visible = false else v.Tracer.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.Tracer.Visible = false end
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.Tracer.Color = Color3.fromRGB(0,255,0)
                else
                v.Tracer.Color=Esp.Settings.TracerColor
                end
                ;v.Tracer.Thickness=Esp.Settings.TracerThickness;v.Transparency=Esp.Settings.TracerTransparrency;
                if Esp.Settings.TracerFrom == "Bottom" then
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y)
                    v.Tracer.To = Vector2.new(x,y+h*0.5)
                elseif Esp.Settings.TracerFrom == "Middle" then
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
                    v.Tracer.To = Vector2.new(x,y)
                else
                    v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/Camera.ViewportSize.Y)
                    if Esp.Settings.Sleeping == true then
                        v.Tracer.To = Vector2.new(x,(y-h)-v.Sleeping.TextBounds.Y*0.5)
                    else
                        v.Tracer.To = Vector2.new(x,y-h*0.5)
                    end
                end
            else
                v.Tracer.Visible = false
            end
            if OnScreen == true and Esp.Settings.ViewAngle == true and Distance <= Esp.Settings.RenderDistance then
                if Esp.Settings.TeamCheck == true and TeamTag == false then v.ViewAngle.Visible = true elseif Esp.Settings.TeamCheck == true and TeamTag == true then v.ViewAngle.Visible = false else v.ViewAngle.Visible = true end
                if Esp.Settings.TargetSleepers == true and v.PlayerTable.sleeping == true then v.ViewAngle.Visible = false end
                if inlos(Character.HumanoidRootPart.Position, Character) and Esp.Settings.HighlightVisible then
                v.ViewAngle.Color = Color3.fromRGB(0,255,0)
                else
                v.ViewAngle.Color=Esp.Settings.ViewAngleColor
                end
                v.ViewAngle.Thickness=Esp.Settings.ViewAngleThickness;v.Transparency=Esp.Settings.ViewAngleTransparrency;
                local headpos = Camera:WorldToViewportPoint(Character.Head.Position)
                local offsetCFrame = CFrame.new(0, 0, -4)
                v.ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
                local value = math.clamp(1/Distance*100, 0.1, 1)
                local dir = Character.Head.CFrame:ToWorldSpace(offsetCFrame)
                offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
                local dirpos = Camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                if OnScreen == true then
                    v.ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
                    offsetCFrame = CFrame.new(0, 0, -4)
                end
            else
                v.ViewAngle.Visible = false
            end
        else
            v.Box.Visible=false;v.BoxOutline.Visible=false;v.Tool.Visible=false;v.Armour.Visible=false;v.Sleeping.Visible=false;v.ViewAngle.Visible=false;v.Tracer.Visible=false;
        end
    end
end
end

-- Esp updater
local PlayerUpdater = game:GetService("RunService").RenderStepped
local PlayerConnection = PlayerUpdater:Connect(function()
    Esp:UpdateEsp()
end)

--Init Functions
for i, v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
    if not table.find(cache,v) then
        table.insert(cache,v)
        Esp:CreateEsp(v)
    end
end

-- Esp adder
game:GetService("Workspace").ChildAdded:Connect(function(child)
    if child:FindFirstChild("HumanoidRootPart") then
        for i, v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
            if not table.find(cache,v) then
                Esp:CreateEsp(v)
                table.insert(cache,v)
            end
        end
    end
end)

local Window = Library:CreateWindow({

    Title = 'printing.loot',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

		local CombatTab = Window:AddTab('Combat')

		local SilentAimSector = CombatTab:AddLeftGroupbox('Combat')
		local miscCombat = CombatTab:AddRightTabbox()
		local miscCombatTab = miscCombat:AddTab('Misc')
		local HitBoxSector = CombatTab:AddLeftGroupbox('HitBox')

		SilentAimSector:AddToggle('SilentAim_Enabled', { Text = 'Enable SilentAim', Default = true, Tooltip = nil, })
		Toggles.SilentAim_Enabled:OnChanged(function()
			_Cameras["Toggle"] = Toggles.SilentAim_Enabled.Value
			print(_Cameras["Toggle"])
		end)
		SilentAimSector:AddLabel('SilentAim Keybind'):AddKeyPicker('SilentAimbot_Bind',
		{ Default = 'MB2', Text = 'SilentAim Keybind', Tooltip = nil, NoUI = false, Mode = 'Hold', })
		local OrginalGetCFrame = _Camera.GetCFrame;
		_Camera.GetCFrame = function()
			if _Cameras["Toggle"] and _Cameras["Pos"] then
				return CFrame.new(OrginalGetCFrame().p,
					_Cameras["Pos"].Position + Vector3.new((_Cameras["X_Offset"]), (_Cameras["Y_Offset"]), 0.001));
			else
				return OrginalGetCFrame();
			end
	end
		task.spawn(function()
			while task.wait() do
				if Options.SilentAimbot_Bind:GetState() and _Cameras["Toggle"] and math.random(0,100) <= SilentSettings["hitChance"] then
					local Target;
					if SilentSettings["AimType"] == "To Cursor" then
						Target = getClosestPlayerToCursor();
					else
						Target = getClosestPlayerToPlayer();
					end
					if Target then
						local Head = Target:FindFirstChild("Head");
						if Head then
							local oldx = Head.Position.X;
							local oldy = Head.Position.Y;
							if SilentSettings.TeamCheck == true and Head.Teamtag.Enabled == false then
							if SilentSettings["Prediction"] == true then
								if Functions:GetClosest() ~= nil then
								_Network.Send(_SendCodes.ENT_LOOK_AT, playerId)
								_Cameras["Pos"] = CFrame.new(Head.CFrame.Position+Functions:Predict());
                                wait(0.01)
                                _Cameras["Pos"] = nil;
							else
								if Functions:GetClosest() ~= nil then
								_Network.Send(_SendCodes.ENT_LOOK_AT, playerId)
								_Cameras["Pos"] = CFrame.new(Head.CFrame.Position)
                                wait(0.01)
                                _Cameras["Pos"] = nil;
                                	end
                                end
							end
						end
					end
				else
					_Cameras["Pos"] = nil;
					end
				end
			end
		end)
		
		SilentAimSector:AddDropdown('AimTypeDrop',
			{ Values = { "To Cursor", "To Player" }, Default = 1, Multi = false, Text = 'Target', Tooltip = nil, })
		Options.AimTypeDrop:OnChanged(function()
			SilentSettings["AimType"] = Options.AimTypeDrop.Value;
		end)
		SilentAimSector:AddSlider('Aim_Distance',
			{ Text = 'Max Distance', Default = 500, Min = 0, Max = 1000, Rounding = 0, Compact = false, })
		Options.Aim_Distance:OnChanged(function()
			SilentSettings["AimDis"] = Options.Aim_Distance.Value;
		end)
        SilentAimSector:AddSlider('HitChance', {Text='Hit Chance',Default=100,Min=0,Max=100,Rounding=0,Compact=false,Suffix="%"}):OnChanged(function(Value)
    SilentSettings["hitChance"] = Value
end)
SilentAimSector:AddToggle('Team_Check', { Text = 'Team Check', Default = true, Tooltip = nil, })
		Toggles.Team_Check:OnChanged(function()
			SilentSettings["TeamCheck"] = Toggles.Team_Check.Value;
		end)
SilentAimSector:AddToggle('Pred', { Text = 'Prediction', Default = true, Tooltip = nil, })
		Toggles.Pred:OnChanged(function()
			SilentSettings["Prediction"] = Toggles.Pred.Value;
		end)

miscCombatTab:AddToggle('AutoReload',{Text='Auto Reload (risky)',Default=false}):OnChanged(function(Value)
    task.spawn(function()
        while Value do task.wait()
            if getrenv()._G.modules.FPS.GetEquippedItem() ~= nil and getrenv()._G.modules.FPS.GetEquippedItem().id ~= nil and getrenv()._G.modules.FPS.GetEquippedItem().ammo and getrenv()._G.modules.FPS.GetEquippedItem().ammo < math.round(require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).MaxAmmo/1.5) then
                game.Players.LocalPlayer:FindFirstChild("RemoteEvent"):FireServer(10, "Reload")
                print("auto re-loaded!")
                wait(0.1)
            end
        end
    end)
end)

miscCombatTab:AddToggle("LootAll", { Text = "Loot All", Default = false }):AddKeyPicker("LootAllKeyBind",{ Default = "V", SyncToggleState = true, Mode = "Toggle", Text = "Loot All", NoUI = false }); 
Toggles.LootAll:OnChanged(function()
    for G = 1, 20 do 
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(12, G, true)
    end
end)

local FovCircle = Functions:Draw("Circle",{Color=Fov.Settings.FovColor,Radius=Fov.Settings.FovSize,NumSides=90,Thickness=1,Transparency=Fov.Settings.FovTransparency,ZIndex=2,Visible=false})

local FOVTabbox = CombatTab:AddRightTabbox()
local FovTab = FOVTabbox:AddTab('FOV')

FovTab:AddToggle('Fov',{Text='Enabled',Default=false}):AddColorPicker('FovColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
--FovTab:AddToggle('Dynamic',{Text='Dynamic',Default=true})
FovTab:AddDropdown('FovPosition', {Values = {"Screen","Mouse"},Default = 2,Multi = false,Text = 'Position'}):OnChanged(function(Value)
    Fov.Settings.FovPosition = Value
end)
FovTab:AddSlider('FovSize', {Text='Size',Default=90,Min=30,Max=350,Rounding=0,Compact=false}):OnChanged(function(Value)
    Fov.Settings.FovSize = Value;FovCircle.Radius = Value
end)


game:GetService("RunService").RenderStepped:Connect(function()
    Fov.Settings.RealFovSize=FovCircle.Radius
    if Fov.Settings.Dynamic == true then
        local set = Fov.Settings.FovSize * ((Fov.Settings.FovSize-Camera.FieldOfView)/100 + 1) + 5
        FovCircle.Radius = set
    else
        FovCircle.Radius=Fov.Settings.FovSize
    end
    if Fov.Settings.FovPosition == "Screen" then
        FovCircle.Position = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
    else
        local MousePos = Camera.WorldToViewportPoint(Camera,game.Players.LocalPlayer:GetMouse().Hit.p)
        FovCircle.Position = Vector2.new(MousePos.X,MousePos.Y)
    end
end)

Toggles.Fov:OnChanged(function(Value)
    Fov.Settings.FovEnabled = Value
    FovCircle.Visible = Value
end)
Options.FovColor:OnChanged(function(Value)
    Fov.Settings.FovColor = Value
    FovCircle.Color = Value
end)

local Visual = Window:AddTab('Visuals')
local PlayerVisualTabbox = Visual:AddLeftTabbox()
local PlayerVisualTab = PlayerVisualTabbox:AddTab('ESP')
local PlayerSettingsVisualTab = PlayerVisualTabbox:AddTab('Settings')

PlayerVisualTab:AddToggle('Boxes',{Text='Box',Default=false}):AddColorPicker('BoxesColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
PlayerVisualTab:AddToggle('Sleeping',{Text='Sleeping or awake',Default=false}):AddColorPicker('SleepingColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
PlayerVisualTab:AddToggle('Distances',{Text='Length',Default=false}):AddColorPicker('DistancesColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
PlayerVisualTab:AddToggle('Armour',{Text='Armour',Default=false}):AddColorPicker('ArmourColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
PlayerVisualTab:AddToggle('Tool',{Text='Weapon',Default=false}):AddColorPicker('ToolColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
--PlayerVisualTab:AddToggle('ViewAngle',{Text='View Angle',Default=false}):AddColorPicker('ViewAngleColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})
--PlayerVisualTab:AddToggle('Tracer',{Text='Tracer',Default=false}):AddColorPicker('TracerColor',{Default=Color3.fromRGB(206,250,5),Title='Color'})

--Esp Switches
Toggles.Armour:OnChanged(function(Value)
    Esp.Settings.Armour = Value
end)
Options.ToolColor:OnChanged(function(Value)
    Esp.Settings.ToolColor = Value
end)
Toggles.Tool:OnChanged(function(Value)
    Esp.Settings.Tool = Value
end)
Options.ArmourColor:OnChanged(function(Value)
    Esp.Settings.ArmourColor = Value
end)
Toggles.Armour:OnChanged(function(Value)
    Esp.Settings.Armour = Value
end)
Toggles.Distances:OnChanged(function(Value)
    Esp.Settings.Distances = Value
end)
Options.DistancesColor:OnChanged(function(Value)
    Esp.Settings.DistanceColor = Value
end)
Options.SleepingColor:OnChanged(function(Value)
    Esp.Settings.SleepingColor = Value
end)
Toggles.Sleeping:OnChanged(function(Value)
    Esp.Settings.Sleeping = Value
end)
Options.BoxesColor:OnChanged(function(Value)
    Esp.Settings.BoxesColor = Value
end)
Toggles.Boxes:OnChanged(function(Value)
    Esp.Settings.Boxes = Value
end)
PlayerSettingsVisualTab:AddSlider('RenderDistance', {Text='Render Distance',Default=1500,Min=1,Max=1500,Rounding=0,Compact=false,Suffix="m"}):OnChanged(function(Value)
    Esp.Settings.RenderDistance = Value
end)
PlayerSettingsVisualTab:AddSlider('TextSize', {Text='Text Size',Default=15,Min=8,Max=50,Rounding=0,Compact=false}):OnChanged(function(Value)
    Esp.Settings.TextSize = Value
end)
PlayerSettingsVisualTab:AddToggle('TargetSleepers',{Text='Dont Show Sleepers',Default=true}):OnChanged(function(Value)
    Esp.Settings.TargetSleepers = Value
end)
PlayerSettingsVisualTab:AddToggle('TeamCheck',{Text='Team Check',Default=true}):OnChanged(function(Value)
    Esp.Settings.TeamCheck = Value
end)
PlayerSettingsVisualTab:AddToggle('HighlightVis',{Text='Highlight Visible Players',Default=true}):OnChanged(function(Value)
    Esp.Settings.HighlightVisible = Value
end)
PlayerSettingsVisualTab:AddToggle('Rainbow',{Text='Rainbow',Default=false}):OnChanged(function(Value)
    Esp.Settings.Rainbow = Value
end)
PlayerSettingsVisualTab:AddDropdown('TracerPosition',{Values={"Bottom","Middle","Top"},Default=1,Multi=false,Text='Tracer Position'}):OnChanged(function(Value)
    Esp.Settings.TracerFrom = Value
end)

local CrosshairVisualTabbox = Visual:AddLeftTabbox()
local CrosshairVisualTab = CrosshairVisualTabbox:AddTab('Crosshair')

getgenv().CrosshairSettings = {
			Color = Color3.fromRGB(206,250,5),
			Opacity = 1,
			Length = 10,
			Thickness = 1,
			Offset = 3,
			Dot = false,
			FollowCursor = false,
			HideMouseIcon = false,
			HideGameCrosshair = false,
			VisibleHS = false
		}
		loadstring(game:HttpGet("https://github.com/ZXCSt1vaha/Main/raw/main/CrossHairLOL"))()
		CrosshairVisualTab:AddToggle('VisibleCH', { Text = 'Visible', Default = false, Tooltip = nil, })
		Toggles.VisibleCH:OnChanged(function(chtv)
			getgenv().CrosshairSettings.VisibleHS = chtv
		end)
		CrosshairVisualTab:AddLabel('Color'):AddColorPicker('CHJColor', { Default = Color3.fromRGB(206,250,5), Title = 'Color', })
		Options.CHJColor:OnChanged(function(chc)
			getgenv().CrosshairSettings.Color = chc
		end)
		CrosshairVisualTab:AddToggle('HideMouseIconT', { Text = 'Hide Mouse', Default = false, Tooltip = nil, })
		Toggles.HideMouseIconT:OnChanged(function(hmich)
			getgenv().CrosshairSettings.HideMouseIcon = hmich
		end)
		CrosshairVisualTab:AddSlider('ThicknessS', {
			Text = 'Thickness',
			Default = 1,
			Min = 0,
			Max = 5,
			Rounding = 1,
			Compact = false,
		})
		Options.ThicknessS:OnChanged(function(tck)
			getgenv().CrosshairSettings.Thickness = tck
		end)

local MiscVisualTabbox = Visual:AddRightTabbox()
local MiscVisualTab = MiscVisualTabbox:AddTab('Misc')
local arrowToggle = false
local bulletToggle = false
Arrow.Trail.Lifetime = 20

local arrowLight = Instance.new("PointLight")
arrowLight.Parent = Arrow
arrowLight.Brightness = 0.2
arrowLight.Range = 50

MiscVisualTab:AddToggle('Arrow_trail',{Text='Arrow trail color',Default=false}):AddColorPicker('Arrow_trail_color',{Default=Color3.fromRGB(206,250,5),Title='Color'})
MiscVisualTab:AddToggle('Bullet_trail',{Text='Bullet trail color',Default=false}):AddColorPicker('Bullet_trail_color',{Default=Color3.fromRGB(206,250,5),Title='Color'})

Toggles.Arrow_trail:OnChanged(function(Value)
    arrowToggle = Value
end)
Options.Arrow_trail_color:OnChanged(function(Value)
if arrowToggle then
    local colorSequenceArrow = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Value),
    ColorSequenceKeypoint.new(1, Value),
}
Arrow.Trail.Color = colorSequenceArrow
Arrow.Material = "Neon"
Arrow.Color = Value
arrowLight.Color = Value
else return end
end)

Toggles.Bullet_trail:OnChanged(function(Value)
    bulletToggle = Value
end)
Options.Bullet_trail_color:OnChanged(function(Value)
if bulletToggle then
Bullet.PointLight.Color = Value
Bullet.Color = Value
else return end
end)

local MiscTab = Window:AddTab('Misc')
local chatSpammerTab = MiscTab:AddLeftGroupbox('Chat Spammer')

local spammerToggle = false
local spammerMsg = 'printing.loot'
local spammerTime = 3

chatSpammerTab:AddToggle('spammer_Toggle',{Text='Enabled',Default=false}):OnChanged(function(Value)
spammerToggle = Value
    task.spawn(function()
        while spammerToggle do task.wait(spammerTime)
        _Network.Send(_SendCodes.SEND_CHAT_MESSAGE, spammerMsg, "Global")
	end
end)
end)
chatSpammerTab:AddInput('spammer_Text',{Text='Spammer text',Default='printing.loot on top [gg/YJcxRRBjUb]',Finished = true}):OnChanged(function(Value)
    spammerMsg = Value
end)
chatSpammerTab:AddSlider('spammer_Delay', {Text='Spammer delay',Default=3,Min=1,Max=10,Rounding=0,Compact=false,Suffix="s"}):OnChanged(function(Value)
    spammerTime = Value
end)

local beforeNameText = 'get rekt'
local beforeDistanceText = 'i just got you from'
local afterDisText = 'printing.loot on top [gg/YJcxRRBjUb]'
local trashTalkToggle = false
local trashRNG = false
local userOrDisplay = 'Username'

local Chats = {
    ["Trash Talk"] = {"please uninstall this game or go to adopt me bro", "nice one bud", "maybe i should teach you how to actually play the game", "sit down dog", "soooo bad kid pls stop playing", "ur mom probably better than u lol"};
    ["Kid"] = {"my mommy said i can pway for five more minutes guys", "STOP ITTTT IM TELLING MY MOMMY", "pwease stop ur hurting muh feewings...", "my dad owns dis gaem, he'll ban u!!"};
    ["Noob"] = {"um guys, how do i play this game", "which button is it to shoot now", "please go easy on me guys, im new to this", "if u do not go easy on me, i will report u"};
    ["British"] = {"oh good day to u fam!", "splendid day we having bruv?", "fancy a cuppa?", "i'm chuffed to bits!", "britain: the land of embarrassment and breakfast.", "lets sip our tea shall we mate!", "OI BRUV LOOK AT WHAT YOU DID", "oh my days!"};
}

local trashTalkTabbox = MiscTab:AddRightTabbox()
local trashTalkTab = trashTalkTabbox:AddTab('Trash Talk')
local trashTalkSettingsTab = trashTalkTabbox:AddTab('Settings')
trashTalkTab:AddInput('b4_name_Text',{Text='Before Name Text',Default='get rekt',Finished = true}):OnChanged(function(Value)
    beforeNameText = Value
end)
trashTalkTab:AddInput('b4_distance_Text',{Text='Before Distance Text',Default='i just got you from',Finished = true}):OnChanged(function(Value)
    beforeDistanceText = Value
end)
trashTalkTab:AddInput('after_distance_Text',{Text='After Distance Text',Default='printing.loot on top [gg/YJcxRRBjUb]',Finished = true}):OnChanged(function(Value)
    afterDisText = Value
end)
trashTalkSettingsTab:AddToggle('talk_Toggle',{Text='Enabled',Default=false}):OnChanged(function(Value)
    trashTalkToggle = Value
end)
trashTalkSettingsTab:AddDropdown('nameOrDisplayName',
	{ Values = { "Username", "Displayname" }, Default = 1, Multi = false, Text = 'Type', Tooltip = nil, })
Options.AimTypeDrop:OnChanged(function()
	userOrDisplay = Options.nameOrDisplayName.Value
end)
trashTalkSettingsTab:AddButton({Text = 'Preview Trash Talk Text',
    Func = function()
        print(beforeNameText..' '..'NAME'..' '..beforeDistanceText..' '..'100m'..' '..afterDisText)
    end,
    DoubleClick = false,
    Tooltip = 'Open F9 to preview the text!'
})

game:GetService("LogService").MessageOut:Connect(function(message)
    local extractedName = message:match("->([%w_]+)")
    local initialHealth, finalHealth = message:match("(%-?%d+%.?%d*)%D*->(%-?%d+%.?%d*)hp")
    local studsValue = message:match("(%d+%.?%d*)s")

    if extractedName and initialHealth and finalHealth and studsValue and extractedName ~= game.Players.LocalPlayer.Name then
        local studsTaken = tonumber(studsValue)
        local displayName = game.Players[extractedName].DisplayName
        if tonumber(finalHealth) <= 0 and trashTalkToggle then
            if userOrDisplay == 'Username' then
            _Network.Send(_SendCodes.SEND_CHAT_MESSAGE, beforeNameText.." "..extractedName.." "..beforeDistanceText.." "..tonumber(studsValue).."m"..' '..afterDisText, "Global")
            else
            _Network.Send(_SendCodes.SEND_CHAT_MESSAGE, beforeNameText.." "..displayName.." "..beforeDistanceText.." "..tonumber(studsValue).."m"..' '..afterDisText, "Global")
            end
        end
    end
end)

--[[local tagText = 'printing.loot'
local tagColorT = false
local senderColorT = false
local TagColor = Color3.fromRGB(206,250,5)
local SenderColor = Color3.fromRGB(206,250,5)

local chatTab = MiscTab:AddLeftGroupbox('Chat')
chatTab:AddInput('tag_Text',{Text='Tag Text',Default='printing.loot',Finished = true}):OnChanged(function(Value)
    tagText = Value
end)
chatTab:AddToggle('tagColorToggle',{Text='Tag Enabled',Default=false}):AddColorPicker('Tag_color',{Default=Color3.fromRGB(206,250,5),Title='Color'})
chatTab:AddToggle('senderColorToggle',{Text='Sender Enabled',Default=false}):AddColorPicker('Sender_color',{Default=Color3.fromRGB(206,250,5),Title='Color'})

Toggles.tagColorToggle:OnChanged(function(Value)
    tagColorT = Value
end)
Toggles.senderColorToggle:OnChanged(function(Value)
    senderColorT = Value
end)
Options.Tag_color:OnChanged(function(Value)
TagColor = Value
end)
Options.Sender_color:OnChanged(function(Value)
SenderColor = Value
end)

local chatMods;chatMods = hookfunction(getrenv()._G.modules.Chat.CreateMessage,function(...)
local arg = {...}
if tagColorT and senderColorT then
arg[1]['senderColor'] = SenderColor
arg[1]['tag'] = tagText
arg[1]['tagColor'] = TagColor
else
if tagColorT and tagColorT then
arg[1]['tag'] = tagText
arg[1]['tagColor'] = TagColor
else
if senderColorT and senderColorT then
arg[1]['senderColor'] = SenderColor
arg[1]['tag'] = tagText
end
end
end
return chatMods(unpack(arg))
end)-]]

function Functions:ToggleLeaves(Trans)
    for i,v in pairs(getrenv()._G.modules.Entity.List) do
        if v.typ == "Tree1" or v.typ == "Tree2" then
            v.model.Leaves.Transparency = Trans
        end
    end
end

game:GetService("Workspace").ChildAdded:Connect(function(child)
    if child:FindFirstChild("Leaves") then
		Functions:ToggleLeaves(1)
    end
end)

sethiddenproperty(game:GetService("Workspace").Terrain,"Decoration",false)
Functions:ToggleLeaves(1)

local Tabs = {
    ['UI Settings'] = Window:AddTab('UI Settings')
}

playerNum = tonumber(#game.Players:GetPlayers())

game.Players.PlayerAdded:Connect(function()
    playerNum = tonumber(#game.Players:GetPlayers())
end)
game.Players.PlayerRemoving:Connect(function()
    playerNum = tonumber(#game.Players:GetPlayers())
end)

Library:SetWatermark('printing.loot | '.. playerNum .. ' players')

Library.KeybindFrame.Visible = true;

Library:OnUnload(function()
    print('Unloaded!')
    Library:SetWatermarkVisibility(false)
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'F1', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings() 
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 
ThemeManager:SetFolder('printingLoot')
SaveManager:SetFolder('printingLoot/Configs')
SaveManager:BuildConfigSection(Tabs['UI Settings']) 
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
